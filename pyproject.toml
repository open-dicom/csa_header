[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
authors = [{name = "Zvi Baratz", email = "z.baratz@gmail.com"}]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = ["numpy>=1.20.0", "pydicom>=2.2.0,<4.0"]
description = "Parse Siemens CSA header information"
dynamic = ["version"]
keywords = ["DICOM", "CSA", "MRI", "Siemens", "metadata"]
license = "MIT"
name = "csa_header"
readme = "README.md"
requires-python = ">=3.9"

[project.optional-dependencies]
examples = ["nibabel>=3.0.0"]
dev = ["ipython", "pre-commit"]

[project.urls]
Documentation = "https://github.com/open-dicom/csa_header#readme"
Issues = "https://github.com/open-dicom/csa_header/issues"
Source = "https://github.com/open-dicom/csa_header"

[tool.hatch.version]
path = "csa_header/__about__.py"

[tool.hatch.build.targets.wheel]
# Only include the main package in wheel distribution
packages = ["csa_header"]
# Exclude development and test files from wheel
exclude = [
  "/.github",
  "/tests",
  "/examples",
  "**/__pycache__",
  "**/*.pyc",
  "**/*.pyo",
  ".coverage*",
  "coverage.xml",
  ".mypy_cache",
  ".pytest_cache",
  ".ruff_cache",
]

[tool.hatch.build.targets.sdist]
# Source distribution includes additional files for development
include = [
  "/csa_header",
  "/tests",
  "/examples",
  "/README.md",
  "/LICENSE.txt",
  "/CHANGELOG.md",
  "/CONTRIBUTING.md",
  "/CODE_OF_CONDUCT.md",
  "/SECURITY.md",
  "/pyproject.toml",
]
# But still exclude caches and artifacts
exclude = [
  "/.github",
  "**/__pycache__",
  "**/*.pyc",
  "**/*.pyo",
  ".coverage*",
  "coverage.xml",
  ".mypy_cache",
  ".pytest_cache",
  ".ruff_cache",
  ".git",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11", "3.12", "3.13"]

[tool.hatch.envs.default]
dependencies = ["ipython", "pre-commit"]

[tool.hatch.envs.test]
dependencies = ["coverage[toml]>=6.5", "pytest"]
[tool.hatch.envs.test.scripts]
cov = ["test-cov", "cov-report"]
cov-ci = ["test-cov", "cov-xml"]
cov-html = ["cov-report", "coverage html"]
cov-report = ["- coverage combine", "coverage report"]
cov-show = ["test-cov", "cov-html", "xdg-open htmlcov/index.html"]
cov-xml = ["cov-report", "coverage xml"]
test = "pytest"
test-cov = "coverage run"

[tool.hatch.envs.lint]
dependencies = ["black>=23.1.0", "mypy>=1.0.0", "ruff>=0.0.243"]
detached = true
[tool.hatch.envs.lint.scripts]
all = ["style", "typing"]
fmt = ["black {args:.}", "ruff check --fix {args:.}", "style"]
style = ["ruff check {args:.}", "black --check --diff {args:.}"]
typing = "mypy --install-types --non-interactive {args:csa_header}"

[tool.black]
line-length = 120
skip-string-normalization = true
target-version = ["py39"]

[tool.ruff]
line-length = 120
target-version = "py39"

[tool.ruff.lint]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
]
select = [
  "A",
  "ARG",
  "B",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "TID",
  "UP",
  "W",
  "YTT",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["csa_header"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
# Examples can use simpler patterns for clarity
"examples/**/*" = ["EM101", "EM102", "PLR2004", "PLC0415"]

[tool.pytest.ini_options]
testpaths = [
  "tests",
]

[tool.coverage.run]
branch = true
command_line = "-m pytest"
omit = ["csa_header/__about__.py"]
parallel = true
source = ["csa_header"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_equality = true
